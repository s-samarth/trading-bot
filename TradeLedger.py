import json
from datetime import datetime
from decimal import Decimal


# This is a demo trade ledger generated by GPT
class TradeLedger:
    def __init__(self, ledger_file="trade_ledger.json"):
        self.ledger_file = ledger_file
        self.trades = self.load_ledger()

    def load_ledger(self):
        """Load existing trade ledger from file."""
        try:
            with open(self.ledger_file, "r") as file:
                return json.load(file, parse_float=Decimal)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_ledger(self):
        """Save trade ledger to file."""
        with open(self.ledger_file, "w") as file:
            json.dump(self.trades, file, indent=4, default=str)

    def add_trade(self, instrument, trade_type, quantity, price, fees):
        """Add a new trade to the ledger."""
        trade_id = len(self.trades) + 1
        timestamp = datetime.now().isoformat()
        total_value = Decimal(quantity) * Decimal(price)
        net_value = total_value - Decimal(fees)

        trade_entry = {
            "trade_id": trade_id,
            "timestamp": timestamp,
            "instrument": instrument,
            "trade_type": trade_type.upper(),
            "quantity": quantity,
            "price": price,
            "total_value": total_value,
            "fees": fees,
            "net_value": net_value,
        }

        self.trades.append(trade_entry)
        self.save_ledger()
        print(f"Trade {trade_id} added successfully!")

    def view_trades(self):
        """Display all trades in the ledger."""
        for trade in self.trades:
            print(trade)


if __name__ == "__main__":
    # Example Usage
    ledger = TradeLedger()

    # Adding Trades
    ledger.add_trade("AAPL", "buy", 10, 150.50, 1.5)
    ledger.add_trade("TSLA", "sell", 5, 700.00, 2.0)

    # View Trades
    ledger.view_trades()
