# This code is generated by ChatGPT and is to be used as a reference for building a trading engine.
# The code is not complete and should be modified to suit your specific needs.


import asyncio
import signal
import random


class StrategyRunner:
    def __init__(self):
        self.strategies = {}
        self.tasks = []

    def register_strategy(self, name, coroutine_func, cooldown_seconds=10):
        self.strategies[name] = {"func": coroutine_func, "cooldown": cooldown_seconds}

    async def _run_strategy_with_restarts(self, name, func, cooldown):
        try:
            while True:
                try:
                    print(f"[{name}] Executing...")
                    await func()
                    print(f"[{name}] Done. Cooling down for {cooldown}s\n")
                    await asyncio.sleep(cooldown)
                except Exception as e:
                    print(f"[{name}] Error: {e}. Retrying in 5s...\n")
                    await asyncio.sleep(5)
        except asyncio.CancelledError:
            print(f"[{name}] Received cancel. Exiting strategy cleanly.")
            raise

    async def start(self):
        for name, config in self.strategies.items():
            task = asyncio.create_task(
                self._run_strategy_with_restarts(
                    name, config["func"], config["cooldown"]
                )
            )
            self.tasks.append(task)

        await asyncio.gather(*self.tasks)

    async def cancel_all(self):
        print("Cancelling all strategies...")
        for task in self.tasks:
            task.cancel()
        await asyncio.gather(*self.tasks, return_exceptions=True)
        print("All strategies shut down.")


# === Example Strategies ===


async def scalper_logic():
    await asyncio.sleep(random.uniform(0.5, 1.5))
    if random.random() < 0.2:
        raise RuntimeError("Simulated crash")
    print("[Scalper] Finished logic.")


async def swing_logic():
    await asyncio.sleep(1)
    print("[Swing] Trade check complete.")


# === Entry Point ===


async def main():
    runner = StrategyRunner()
    runner.register_strategy("Scalper", scalper_logic, cooldown_seconds=5)
    runner.register_strategy("Swing", swing_logic, cooldown_seconds=8)

    stop_event = asyncio.Event()

    async def shutdown():
        await runner.cancel_all()
        stop_event.set()

    loop = asyncio.get_running_loop()
    loop.add_signal_handler(signal.SIGINT, lambda: asyncio.create_task(shutdown()))
    loop.add_signal_handler(signal.SIGTERM, lambda: asyncio.create_task(shutdown()))

    await asyncio.gather(runner.start(), stop_event.wait())


if __name__ == "__main__":
    asyncio.run(main())
